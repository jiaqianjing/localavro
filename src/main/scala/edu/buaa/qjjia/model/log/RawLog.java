/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.buaa.qjjia.model.log;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RawLog extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawLog\",\"namespace\":\"edu.buaa.qjjia.model.log\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"level\",\"type\":\"string\"},{\"name\":\"extras\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"descs\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long timestamp;
  @Deprecated public CharSequence level;
  @Deprecated public java.util.Map<CharSequence,CharSequence> extras;
  @Deprecated public java.util.List<CharSequence> descs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RawLog() {}

  /**
   * All-args constructor.
   */
  public RawLog(Long timestamp, CharSequence level, java.util.Map<CharSequence,CharSequence> extras, java.util.List<CharSequence> descs) {
    this.timestamp = timestamp;
    this.level = level;
    this.extras = extras;
    this.descs = descs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return level;
    case 2: return extras;
    case 3: return descs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: timestamp = (Long)value$; break;
    case 1: level = (CharSequence)value$; break;
    case 2: extras = (java.util.Map<CharSequence,CharSequence>)value$; break;
    case 3: descs = (java.util.List<CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'level' field.
   */
  public CharSequence getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(CharSequence value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'extras' field.
   */
  public java.util.Map<CharSequence,CharSequence> getExtras() {
    return extras;
  }

  /**
   * Sets the value of the 'extras' field.
   * @param value the value to set.
   */
  public void setExtras(java.util.Map<CharSequence,CharSequence> value) {
    this.extras = value;
  }

  /**
   * Gets the value of the 'descs' field.
   */
  public java.util.List<CharSequence> getDescs() {
    return descs;
  }

  /**
   * Sets the value of the 'descs' field.
   * @param value the value to set.
   */
  public void setDescs(java.util.List<CharSequence> value) {
    this.descs = value;
  }

  /** Creates a new RawLog RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new RawLog RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new RawLog RecordBuilder by copying an existing RawLog instance */
  public static Builder newBuilder(RawLog other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for RawLog instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawLog>
    implements org.apache.avro.data.RecordBuilder<RawLog> {

    private long timestamp;
    private CharSequence level;
    private java.util.Map<CharSequence,CharSequence> extras;
    private java.util.List<CharSequence> descs;

    /** Creates a new Builder */
    private Builder() {
      super(RawLog.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.extras)) {
        this.extras = data().deepCopy(fields()[2].schema(), other.extras);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.descs)) {
        this.descs = data().deepCopy(fields()[3].schema(), other.descs);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RawLog instance */
    private Builder(RawLog other) {
            super(RawLog.SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.extras)) {
        this.extras = data().deepCopy(fields()[2].schema(), other.extras);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.descs)) {
        this.descs = data().deepCopy(fields()[3].schema(), other.descs);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'timestamp' field */
    public Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'timestamp' field */
    public Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'level' field */
    public CharSequence getLevel() {
      return level;
    }
    
    /** Sets the value of the 'level' field */
    public Builder setLevel(CharSequence value) {
      validate(fields()[1], value);
      this.level = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'level' field has been set */
    public boolean hasLevel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'level' field */
    public Builder clearLevel() {
      level = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'extras' field */
    public java.util.Map<CharSequence,CharSequence> getExtras() {
      return extras;
    }
    
    /** Sets the value of the 'extras' field */
    public Builder setExtras(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[2], value);
      this.extras = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'extras' field has been set */
    public boolean hasExtras() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'extras' field */
    public Builder clearExtras() {
      extras = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'descs' field */
    public java.util.List<CharSequence> getDescs() {
      return descs;
    }
    
    /** Sets the value of the 'descs' field */
    public Builder setDescs(java.util.List<CharSequence> value) {
      validate(fields()[3], value);
      this.descs = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'descs' field has been set */
    public boolean hasDescs() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'descs' field */
    public Builder clearDescs() {
      descs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    public RawLog build() {
      try {
        RawLog record = new RawLog();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (Long) defaultValue(fields()[0]);
        record.level = fieldSetFlags()[1] ? this.level : (CharSequence) defaultValue(fields()[1]);
        record.extras = fieldSetFlags()[2] ? this.extras : (java.util.Map<CharSequence,CharSequence>) defaultValue(fields()[2]);
        record.descs = fieldSetFlags()[3] ? this.descs : (java.util.List<CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
